#!/bin/bash

# gitpack
# - written by azman@my1matrix.net
# - was a part of packthis script (maintain related options)
# - create git bundle (AND git patch if necessary)

CURRPATH=$(pwd)
WORKPATH=$(dirname $CURRPATH)
HOMEPATH=$HOME
[ -d "$HOMEPATH/Slack" ] && HOMEPATH="$HOMEPATH/Slack"
ARCHPATH=$HOMEPATH/archive/project
BALLPATH=$HOMEPATH/temp
BALLNAME=$(basename $CURRPATH)
MAINNAME=${MAINNAME:="$BALLNAME"}
BALLSUFX=${BALLSUFX:=""}
DOBUNDLE=${DOBUNDLE:="YES"}
CHKPATCH=${CHKPATCH:="YES"}
DOMASTER=${DOMASTER:="NO"}
DATE_FMT=${DATE_FMT:="+%Y%m%d%H%M%S"}
PATCHGIT=${PATCHGIT:="NO"}
PATCHNUM=${PATCHNUM:="4"}
DO_SWEEP=${DO_SWEEP:="NO"}

#echo "[INFO] Running "`basename $0`

while [ "$1" != "" ]; do
	case $1 in
		--diff)
			DOBUNDLE="NO"
			;;
		--suffix)
			shift
			BALLSUFX="-$1"
			;;
		--name)
			shift
			[ "$1" == "" ] &&
				echo "No name given ['$1']?" && exit 1
			MAINNAME="$1"
			;;
		--parent-name)
			TESTNAME=$(basename $WORKPATH)
			[ "$TESTNAME" = "/" ] && TESTNAME="root"
			MAINNAME="${TESTNAME}-${BALLNAME}"
			;;
		--archive)
			[ ! -d "$ARCHPATH" ] &&
				echo "Archive path '$ARCHPATH' not found!" && exit 1
			BALLPATH=$ARCHPATH
			# not archiving patches!
			CHKPATCH="NO"
			PATCHGIT="NO"
			;;
		--sweep)
			DO_SWEEP="YES"
			;;
		--update)
			[ ! -d "$ARCHPATH" ] &&
				echo "Archive path '$ARCHPATH' not found!" && exit 1
			BALLPATH=$ARCHPATH
			# not archiving patches!
			CHKPATCH="NO"
			PATCHGIT="NO"
			DO_SWEEP="YES"
			;;
		--master)
			DOMASTER="YES"
			;;
		--path)
			shift
			[ ! -d "$1" ] && echo "Path '$1' not found!" && exit 1
			[ -d "$1" ] && BALLPATH=$(cd $1;pwd)
			;;
		--format-patch)
			shift
			PATCHNUM="$1"
			PATCHGIT="YES"
			CHKPATCH="NO"
			DOBUNDLE="NO"
			;;
		* )
			echo "Unknown parameter ($1)!" && exit 1
			;;
	esac
	shift
done

[ ! -d $BALLPATH ] && mkdir -pv $BALLPATH

GIT_BIN=`which git 2>/dev/null`
[ "$GIT_BIN" == "" ] &&
	echo "Cannot find git! Abort!" && exit 1

[ ! -d "$CURRPATH/.git" ] &&
	echo "Not a git repo! Abort!" && exit 1

get_branch()
{
	local chk_branch=`git branch | grep "* "`
	chk_branch=`echo "$chk_branch" | sed "s/^.*\* \(.*\)$/\1/"`
	echo -n "$chk_branch"
}

#trap trap_break INT
#trap_break()
#{
#	# user break!
#}

trap trap_error ERR
trap_error()
{
	local cur_branch=`get_branch`
	[ "$cur_branch" == "master" -a "$CHK_BRANCH" != "master" ] &&
		git checkout $CHK_BRANCH 2>/dev/null
}

# check if NOT on master branch
CHK_BRANCH=`get_branch`
if [ "$CHK_BRANCH" != "master" ] ; then
	if [ "$DOMASTER" == "YES" ] ; then
		# try to get to master branch
		git checkout master 2>/dev/null
		[ $? -ne 0 ] && echo "Cannot change branch! Aborting!" && exit 1
	else
		# update tarball suffix
		BALLSUFX="${BALLSUFX}-${CHK_BRANCH}_active"
	fi
fi

#DUMMY=`get_branch`
#false
#[ $? -ne 0 ] && echo "Testing trap! ($DUMMY)" && exit 1

# create git bundle
if [ "$DOBUNDLE" == "YES" ]; then
	# get date of last commit
	CHK_DATE=`git log -1 --format=%cd --date=format:'%Y%m%d%H%M%S'`
	CHK_NAME=${MAINNAME}-${CHK_DATE}
	CHK_FILE=${BALLPATH}/${CHK_NAME}${BALLSUFX}.git
	# check older archive?
	CHK_LIST=`find ${BALLPATH} -type f -name "${MAINNAME}-[0-9]*"`
	for temp in ${CHK_LIST} ; do
		# ignore if not a file (nothing found?)
		[ ! -f "${temp}" ] && continue;
		# leave the current ones
		[ "${temp}" == "${CHK_FILE}" ] && continue;
		# tell them
		echo -n "Found old archive '$temp'"
		[ "$DO_SWEEP" != "YES" ] && echo && continue
		rm -rf ${temp}
		echo ": REMOVED."
	done
	# check if current exists
	if [ -f "$CHK_FILE" ]; then
		echo "Bundle '$CHK_FILE' exists!"
	else
		echo "Creating git bundle '$CHK_FILE' ..."
		# HEAD is not bundled if using '--branches --tags'
		git bundle create $CHK_FILE --all
		[ $? -ne 0 ] && echo "Error running git?" && exit 1
	fi
fi

# prepare name - for patches!
CHK_DATE=`date ${DATE_FMT}`
CHK_NAME=${MAINNAME}-${CHK_DATE}

# diff patch is ignored if formatted patch has been requested
if [ "$CHKPATCH" == "YES" ]; then
	# create diff - if we have one?
	GIT_DIFF=`git diff`
	if [ "$GIT_DIFF" != "" ]; then
		echo "$GIT_DIFF" >${BALLPATH}/${CHK_NAME}${BALLSUFX}.patch
		echo "Patch file '${BALLPATH}/${CHK_NAME}${BALLSUFX}.patch' created."
	fi
fi

# are we formatting committed patches?
if [ "$PATCHGIT" == "YES" ]; then
	[ "$PATCHNUM" == "" ] && PATCHNUM=1
	BALLSUFX="${BALLSUFX}_patches"
	rm -rf ${BALLPATH}/${CHK_NAME}*
	git format-patch -o ${BALLPATH}/${CHK_NAME}${BALLSUFX} -${PATCHNUM}
	[ $? -ne 0 ] && echo "Error running git?" && exit 1
fi

# make sure original branch restored
trap_error
