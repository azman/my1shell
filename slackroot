#!/bin/bash

# slackroot
# - written by azman@my1matrix.net
# - slackware 32-bit chroot (through ssh) installation

# standard tool info
MY1_TOOLNAME="my1 Slackware chroot32 Tool"
MY1_TOOLVERS="2019.06.00"
MY1_TOOLBASE=$(basename $0 .sh)
MY1_TOOLPATH=$(cd $(dirname $0);pwd)
MY1_TOOL_LIB="libmy1slack"
# look for my1slack library
[ -r "$MY1_TOOLPATH/$MY1_TOOL_LIB" ] && . $MY1_TOOLPATH/$MY1_TOOL_LIB
# get slackware tree info
call_setup
# look for config file
for config in $(pwd) $HOME; do
	config=$config/.$MY1_TOOLBASE
	[ -r $config ] && . $config && break
done

# my1slack tool specific
MY1_TOOL_LOG=${MY1_TOOL_LOG:="/tmp/${MY1_TOOLBASE}.log"}
MY1_ROOT_DEF=${MY1_ROOT_DEF:="/opt/chroot32"}
MY1_LIVE_DEF=${MY1_LIVE_DEF:="$(pwd)/live"}
MY1_USER_DEF=${MY1_USER_DEF:="user"}
MY1_PACK_DEF=${MY1_PACK_DEF:="00-core"}
# global options & settings
MSG_THISHELP=$(cat <<SETHELPMSG
Usage:
  $MY1_TOOLBASE <command> [options]
Commands:
  create : Create a custom root installation
  config : Configure for chroot32 installation
  chroot : Do create & config in one command
  update : Updates chroot installation
Options:
  --verbose : More info
  --exec    : Execute (else just dry run!)
  --root <path> : Specify root path (default: $MY1_ROOT_DEF)
Options (create):
  --path <path> : Specify path for packages
  --file <file> : Specify file containing package list
  --core    : Select basic system tool packages
  --console : Select console application packages
  --desktop : Select desktop application packages
Log File:
  $MY1_TOOL_LOG
SETHELPMSG
)

function do_root_update()
{
	local chk_root=$1
	local chk_exec="NO"
	local chk_syyy="YES"
	local pkg_list pkg_temp pkg_opts="--reinstall --install-new"
	# check 'command-line'
	shift # first param is chk_root
	while [ "$1" != "" ]; do
		pkg_temp=$1
		case $pkg_temp in
			--exec) chk_exec="YES" ;;
			--verbose) chk_syyy="NO" ;;
			*)
				if [ ! -f $pkg_temp ] ; then
					warn_msg "File '$pkg_temp' not found! Not included!\n"
				else
					pkg_list="${pkg_list}$pkg_temp "
				fi
				;;
		esac
		shift
	done
	# check valid root path... if executing!
	[ "$chk_exec" == "YES" ] &&
		must_have_path "$chk_root" "Root path '$chk_root' not found!"
	# install packages in list to given root
	if [ "$chk_exec" == "YES" ]; then
		echo "$MY1_TOOLBASE - $MY1_TOOLNAME ($MY1_TOOLVERS)" >$MY1_TOOL_LOG
		echo "ExecTime: $(date +%Y%m%d%H%M)" >>$MY1_TOOL_LOG
	fi
	for pkg_file in $pkg_list; do
		[ "$chk_syyy" != "YES" ] && info_msg --no-tag "\n"
		[ "$chk_syyy" != "YES" ] &&
			info_msg "Updating $(basename $pkg_file) in $chk_root ..."
		[ "$chk_exec" == "YES" ] &&
			ROOT=$chk_root upgradepkg $pkg_opts $pkg_file >>$MY1_TOOL_LOG
		[ "$chk_syyy" != "YES" ] && info_msg --no-tag " done!"
	done
	[ "$chk_syyy" != "YES" ] && info_msg --no-tag "\n"
}

function do_root_install()
{
	local chk_root=$1
	local chk_exec="NO"
	local chk_syyy="YES"
	local pkg_list pkg_temp
	# check 'command-line'
	shift # first param is chk_root
	while [ "$1" != "" ]; do
		pkg_temp=$1
		case $pkg_temp in
			--exec) chk_exec="YES" ;;
			--verbose) chk_syyy="NO" ;;
			*)
				if [ ! -f $pkg_temp ] ; then
					warn_msg "File '$pkg_temp' not found! Not included!\n"
				else
					pkg_list="${pkg_list}$pkg_temp "
				fi
				;;
		esac
		shift
	done
	# check valid root path... if executing!
	[ "$chk_exec" == "YES" ] &&
		must_have_path "$chk_root" "Root path '$chk_root' not found!"
	# install packages in list to given root
	if [ "$chk_exec" == "YES" ]; then
		echo "$MY1_TOOLBASE - $MY1_TOOLNAME ($MY1_TOOLVERS)" >$MY1_TOOL_LOG
		echo "ExecTime: $(date +%Y%m%d%H%M)" >>$MY1_TOOL_LOG
	fi
	for pkg_file in $pkg_list; do
		[ "$chk_syyy" != "YES" ] && info_msg --no-tag "\n"
		[ "$chk_syyy" != "YES" ] &&
			info_msg "Installing $(basename $pkg_file) to $chk_root ..."
		[ "$chk_exec" == "YES" ] &&
			installpkg --root $chk_root $pkg_file >>$MY1_TOOL_LOG
		[ "$chk_syyy" != "YES" ] && info_msg --no-tag " done!"
	done
	[ "$chk_syyy" != "YES" ] && info_msg --no-tag "\n"
}

function do_pack_list()
{
	local pkg_core="a d k l n"
	local pkg_apps="ap t tcl"
	local pkg_xgui="x xap"
	local pkg_path=$1
	local pkg_opts=$2
	local pkg_list pkg_file
	# check package option
	case "$pkg_opts" in
		CORE) pkg_opts="$pkg_core" ;;
		CONS) pkg_opts="$pkg_core $pkg_apps" ;;
		DESK) pkg_opts="$pkg_core $pkg_apps $pkg_xgui" ;;
		*) error_exit "Unknown package option!" ;;
	esac
	# check valid pkg path
	must_have_path "$pkg_path" "Package(s) path '$pkg_path' not found!"
	# select packages
	for pkg_soft in $pkg_opts; do
		cd $pkg_path
		if [ -d $pkg_soft ] ; then
			cd $pkg_soft
			for pkg_name in $(find . -name "*.t[xg]z"|uniq|sort); do
				pkg_file=${pkg_path}/${pkg_soft}/${pkg_name//.\//}
				pkg_list="${pkg_list}${pkg_file} "
			done
		fi
	done
	echo -n "$pkg_list"
}

function rootfs_create()
{
	local pkg_path="$SLACKPACK"
	local pkg_opts="CORE" # default package set
	local chk_root="$MY1_ROOT_DEF"
	local chk_file=""
	local chk_exec=""
	local chk_syyy=""
	local pkg_list pkg_temp tmp_list pkg_name pkg_base
	# check parameters
	while [ "$1" != "" ]; do
		case "$1" in
			--path)
				shift
				pkg_path="$(cd $1;pwd)"
				;;
			--root)
				shift
				chk_root=$1
				;;
			--file)
				shift
				chk_file=$1
				pkg_opts="FILE"
				;;
			--core)
				pkg_opts="CORE"
				;;
			--console)
				pkg_opts="CONS"
				;;
			--desktop)
				pkg_opts="DESK"
				;;
			--verbose)
				chk_syyy="--verbose"
				;;
			--exec)
				chk_exec="--exec"
				;;
			# ignore the rest!
		esac
		shift
	done
	# must be root to exec!
	[ "$chk_exec" == "--exec" ] && must_be_root
	# check in case we're only simulating target root (need not exist!)
	if [ "$chk_exec" != "--exec" ] ; then
		if [ "${chk_root:0:1}" != "/" ] ; then
			[ "${chk_root:0:2}" == "./" ] && chk_root=${chk_root:2}
			chk_root="$(pwd)/${chk_root}"
		fi
	fi
	# check paths
	[ ! -d "$pkg_path" ] && error_exit "Cannot find pkg path '$pkg_path'!"
	[ -d "$chk_root" ] && error_exit "Existing root path '$chk_root'!"
	info_msg "Source path: '$pkg_path'\n"
	info_msg "Target path: '$chk_root'\n"
	info_msg "Pack option: '$pkg_opts'\n"
	# start main info msg
	info_msg "Creating root filesystem... "
	# if executing, check/create root path
	if [ "$chk_exec" == "--exec" ] ; then
		mkdir -p $chk_root
		chk_root=$(cd $chk_root;pwd)
		[ "$chk_syyy" == "--verbose" ] &&
			info_msg "(Target path: '$chk_root') "
	fi
	# if package list given, use it!
	if [ "$pkg_opts" == "FILE" ]; then
		[ ! -r $chk_file ] &&
			error_msg "Cannot open package file '$chk_file'!\n" && return
		ifs_save=$IFS
		IFS=$'\n'
		tmp_list=($(cat $chk_file))
		IFS=$ifs_save
		for (( x=0;x<${#tmp_list[@]};x++ )); do
			pkg_base=${tmp_list[$x]}
			pkg_name=${pkg_base#*!}
			pkg_base=$(find_package $pkg_name)
			pkg_temp=$(find $pkg_path -name "${pkg_base}.t[xg]z")
			pkg_list="${pkg_list}${pkg_temp} "
		done
	else
		# create package list based on pkg_opts
		pkg_list=$(do_pack_list $pkg_path $pkg_opts $chk_file)
	fi
	# install the packages
	do_root_install $chk_root $pkg_list $chk_syyy $chk_exec
	# end main info msg
	info_msg --no-tag "done.\n"
}

function chroot_config()
{
	local chk_root="$MY1_ROOT_DEF"
	local chk_exec="NO"
	local chk_syyy="YES"
	local chk_file
	# check parameters (just look for root and exec)_
	while [ "$1" != "" ]; do
		case "$1" in
			--root)
				shift
				chk_root=$1
				# ensure full pathname
				if [ "${chk_root:0:1}" != "/" ] ; then
					[ "${chk_root:0:2}" == "./" ] && chk_root=${chk_root:2}
					chk_root="$(pwd)/${chk_root}"
				fi
				;;
			--verbose|-v)
				chk_syyy="NO"
				;;
			--exec)
				chk_exec="YES"
				;;
			# ignore the rest!
		esac
		shift
	done
	# create entries for fstab and sshd (also rc.local_shutdown command)
local FSTAB_ENTRY=$(cat <<FSTAB_LINES
# for chroot
proc            $chk_root/proc     proc    defaults        0 0
sysfs           $chk_root/sys      sysfs   defaults        0 0
/home           $chk_root/home     none    bind            0 0
/tmp            $chk_root/tmp      none    bind            0 0
/etc            $chk_root/etc      none    bind            0 0
/dev            $chk_root/dev      none    rbind           0 0
FSTAB_LINES
)
local SSHD_ENTRY=$(cat <<SSHD_LINES
# local ssh means chroot?
Match Address 127.0.0.1
	ChrootDirectory $chk_root
	X11Forwarding yes
SSHD_LINES
)
local SHUTDOWN_ENTRY=$(cat <<SHUTDOWN_LINES
# unbind $chk_root/dev 'recursively'
chk_path=$chk_root/dev
[ "\$(cat /proc/mounts|grep \$chk_path)" != "" ] &&
	umount -n \$(cat /proc/mounts|awk '{print \$2}'|grep "^\$chk_path"|sort -r)
# unmount chroot mounts manually
for a in etc tmp home sys proc; do
	chk_path=$chk_root/\$a
	[ "\$(cat /proc/mounts|grep \$chk_path)" != "" ] && umount \$chk_path
done
SHUTDOWN_LINES
)
	# start main info msg
	info_msg "Configuring chroot environment..."
	# must be root to exec!
	[ "$chk_exec" == "YES" ] && must_be_root
	# check valid root path - only if executing
	[ "$chk_exec" == "YES" ] &&
		must_have_path "$chk_root" "Root path '$chk_root' not found!"
	local do_echo="no"
	# check fstab
	if [ "$(cat /etc/fstab | grep $chk_root)" == "" ]; then
		if [ "$chk_syyy" == "NO" ] ; then
			check_msg --no-tag "\n"
			check_msg "Adding text to /etc/fstab:"
			echo -ne "\n$FSTAB_ENTRY"
			do_echo="yes"
		fi
		[ "$chk_exec" == "YES" ] &&
			echo -e "\n$FSTAB_ENTRY" >> /etc/fstab
	fi
	# check sshd_config
	if [ "$(cat /etc/ssh/sshd_config | grep $chk_root)" == "" ]; then
		if [ "$chk_syyy" == "NO" ] ; then
			check_msg --no-tag "\n"
			check_msg "Adding text to /etc/ssh/sshd_config:"
			echo -ne "\n$SSHD_ENTRY"
			do_echo="yes"
		fi
		[ "$chk_exec" == "YES" ] &&
			echo -e "\n$SSHD_ENTRY" >> /etc/ssh/sshd_config
	fi
	# check shutdown
	chk_file="/etc/rc.d/rc.local_shutdown"
	[ "$chk_exec" == "YES" ] && [ ! -f "$chk_file" ] && touch $chk_file
	local chk_out=""
	[ -r "$chk_file" ] && chk_out="$(cat $chk_file | grep $chk_root/dev)"
	if [ ! -f "$chk_file" ] || [ "$chk_out" == "" ]; then
		if [ "$chk_syyy" == "NO" ] ; then
			check_msg --no-tag "\n"
			check_msg "Adding text to $chk_file:"
			echo -ne "\n$SHUTDOWN_ENTRY"
			do_echo="yes"
		fi
		[ "$chk_exec" == "YES" ] &&
			echo -e "\n$SHUTDOWN_ENTRY" >> $chk_file
	fi
	[ "$do_echo" == "yes" ] && check_msg --no-tag "\n"
	# end main info msg
	info_msg --no-tag "done.\n"
}

function rootfs_update()
{
	local pkg_path="$SLACKPACK"
	local chk_root="$MY1_ROOT_DEF"
	local chk_exec=""
	local chk_syyy=""
	local pkg_list pkg_temp pkg_name pkg_base tmp_list chk_temp
	# check parameters
	while [ "$1" != "" ]; do
		case "$1" in
			--path)
				shift
				pkg_path="$(cd $1;pwd)"
				;;
			--root)
				shift
				chk_root=$1
				;;
			--verbose)
				chk_syyy="--verbose"
				;;
			--exec)
				chk_exec="--exec"
				;;
			# ignore the rest!
		esac
		shift
	done
	# must be root to exec!
	[ "$chk_exec" == "--exec" ] && must_be_root
	# ensure full path for chk_root
	if [ "${chk_root:0:1}" != "/" ] ; then
		[ "${chk_root:0:2}" == "./" ] && chk_root=${chk_root:2}
		chk_root="$(pwd)/${chk_root}"
	fi
	pkg_path="$(cd ${pkg_path}/../patches;pwd)"
	# check paths
	[ ! -d "$pkg_path" ] && error_exit "Cannot find pkg path '$pkg_path'!"
	[ ! -d "$chk_root" ] && error_exit "Cannot find root path '$chk_root'!"
	info_msg "Source path: '$pkg_path'\n"
	info_msg "Target path: '$chk_root'\n"
	# start main info msg
	info_msg "Updating root filesystem... "
	# find patches
	pkg_list=$(list_package_path $pkg_path ${chk_root}/var/log/packages)
	local ifs_save=$IFS
	IFS=$'\n'
	tmp_list=($(echo "$pkg_list"))
	IFS=$ifs_save
	#echo "Patch Count: ${#tmp_list[@]}"
	pkg_list=""
	# extract packages list
	for (( a=0;a<${#tmp_list[@]};a++ )); do
		chk_temp=($(echo ${tmp_list[$a]}))
		[ "${chk_temp[1]}" == "check" ] && pkg_list="${pkg_list}${chk_temp[2]} "
	done
	[ "$pkg_list" == "" ] &&
		info_msg --no-tag "Nothing to update.\n" && return
	# install the packages
	do_root_update $chk_root $pkg_list $chk_syyy $chk_exec
	# end main info msg
	info_msg --no-tag "done.\n"
}

function process_command()
{
	local go_commands="create config chroot squash livefs update"
	local chk_command=$1
	local do_command
	shift
	# check command
	for tcommand in $go_commands; do
		[ "$chk_command" == "$tcommand" ] && do_command=$chk_command && break
	done
	[ "$do_command" == "" ] && echo -e "$MSG_THISHELP\n" && exit 0
	# execute command
	case $do_command in
		create) rootfs_create $@ ;;
		config) chroot_config $@ ;;
		chroot) rootfs_create $@ ; chroot_config $@  ;;
		update) rootfs_update $@ ;;
	esac
}

# BEGIN MAIN SCRIPT

echo -e "\n$MY1_TOOLBASE - $MY1_TOOLNAME ($MY1_TOOLVERS)\n"
process_command "$@"
echo ; exit 0

# END MAIN SCRIPT
