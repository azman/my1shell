#!/bin/bash

# slackroot
# - written by azman@my1matrix.net
# - slackware 32-bit chroot (through ssh) installation

# standard tool info
MY1_TOOLNAME="my1 Slackware chroot32 Tool"
MY1_TOOLVERS="2012.03.00"
MY1_TOOLBASE=$(basename $0 .sh)
MY1_TOOLPATH=$(cd $(dirname $0);pwd)
MY1_TOOL_LIB="libmy1slack"
# look for config file
for config in $(pwd) $MY1_TOOLPATH $HOME; do
	config=$config/.$MY1_TOOLBASE
	[[ ! -f $config ]] && continue
	source $config ; break
done
# look for my1slack library
SLACKARCH=${SLACKARCH:="x86"} # force 32-bit slackware!
[[ -r "$MY1_TOOLPATH/$MY1_TOOL_LIB" ]] &&
	source $MY1_TOOLPATH/$MY1_TOOL_LIB

function process_command()
{
	local pkg_base="a nb"
	local pkg_core="a d k l n"
	local pkg_apps="ap t tcl x xap"
	local pkg_xgui="x xap"
	local pkg_path=$SLACKPKGPATH
	local chk_root="/opt/chroot32"
	local cur_path=$(pwd)
	local chk_exec=""
	local chk_syyy="YES"
	local pkg_opts pkg_list
	local opt_skip_pack opt_do_config
	# check parameters
	while [[ "$1" != "" ]]; do
		case "$1" in
			--path)
				shift
				pkg_path="$(cd $1;pwd)"
				;;
			--root)
				shift
				chk_root="$1"
				;;
			--base-only)
				pkg_opts="BASE"
				;;
			--core-only)
				pkg_opts="CORE"
				;;
			--no-gui)
				pkg_opts="CONS"
				;;
			--desktop)
				pkg_opts="DESK"
				;;
			--do-config)
				opt_do_config="YES"
				;;
			--skip-pack)
				opt_skip_pack="YES"
				;;
			--help|-h|help)
				echo -e "HELP!\n"
				exit 0
				;;
			--verbose|-v)
				chk_syyy=""
				;;
			--exec)
				chk_exec="YES"
				;;
			-*)
				echo -e "Unknown option '$1'!\n" && exit 1
				;;
			*)
				[[ "$do_command" != "" ]] &&
					echo -e "Multiple commands '$1' & '$do_command'\n" && exit 1
				for tcommand in $go_commands; do
					[[ "$1" == "$tcommand" ]] && do_command=$1 && break
				done
				[[ "$do_command" == "" ]] &&
					echo -e "Unknown command '$1'!\n" && exit 1
				;;
		esac
		shift
	done
	# must be root to exec!
	[[ "$chk_exec" == "YES" ]] && must_be_root
	# check paths
	[[ ! -d "$pkg_path" ]] &&
		echo -e "Cannot find pkg path '$pkg_path'!\n" && exit 1
	[[ -d "$chk_root" ]] &&
		echo -e "Existing root path '$chk_root'!\n" && exit 1
	# check in case we're simulating target root
	if [[ "$chk_exec" != "YES" ]] ; then
		if [[ "$(dirname $chk_root)" == "." ]] ; then
			[[ "${chk_root:0:2}" == "./" ]] && chk_root=${chk_root:2}
			chk_root="$(pwd)/${chk_root}"
		fi
	else
		echo -e "Creating root path '$chk_root' ...\n" && mkdir $chk_root
		chk_root=$(cd $chk_root;pwd)
	fi
	echo -ne "Source path: '$pkg_path'\n"
	echo -e "Target path: '$chk_root'\n"
	export CHROOT_PATH=$chk_root
	# check skip request
	if [[ "$opt_skip_pack" != "YES" ]]; then
		# check package option
		case "$pkg_opts" in
			CORE) pkg_opts="$pkg_core" ;;
			CONS) pkg_opts="$pkg_core $pkg_apps" ;;
			DESK) pkg_opts="$pkg_core $pkg_apps $pkg_xgui" ;;
			BASE) pkg_opts="$pkg_base" ;;
		esac
		# install pkgs
		echo -n "Installing packages from $pkg_path :"
		[[ "$chk_syyy" != "YES" ]] && echo -e "\n"
		cd $pkg_path
		for a in $pkg_opts; do
			pkg_list=""
			if [[ "$a" == "nb" ]] ; then
				# special case for base packages!
				a="n"
				cd $a
				for b in dhcpcd iputils net-tools network-scripts ; do
					b=$(find . -name "*.t[xg]z"|grep $b)
					pkg_list="$pkg_list ${pkg_path}/$a/${b//.\//}"
				done
			elif [[ -d $a ]] ; then
				cd $a
				for b in $(find . -name "*.t[xg]z"); do
					pkg_list="$pkg_list ${pkg_path}/$a/${b//.\//}"
				done
			fi
			for b in $pkg_list; do
				[[ ! -f $b ]] && echo "[WARNING] File '$b' not found!" &&
					continue
				[[ "$chk_syyy" != "YES" ]] &&
					echo -n "Installing $(basename $b) to $CHROOT_PATH ..."
				[[ "$chk_exec" == "YES" ]] &&
					installpkg --root $CHROOT_PATH $b >> /tmp/$MY1_TOOLBASE.log
				[[ "$chk_syyy" != "YES" ]] &&
					echo "done!"
			done
			cd $pkg_path
		done
		[[ "$chk_syyy" == "YES" ]] && echo " done!"
		echo
	fi
	# check skip request
	if [[ "$opt_do_config" == "YES" ]]; then
		# check fstab
FSTAB_ENTRY=$(cat <<FSTAB_LINES
# for chroot
proc            $CHROOT_PATH/proc     proc    defaults        0 0
sysfs           $CHROOT_PATH/sys      sysfs   defaults        0 0
/home           $CHROOT_PATH/home     none    bind            0 0
/tmp            $CHROOT_PATH/tmp      none    bind            0 0
/dev            $CHROOT_PATH/dev      none    bind            0 0
/etc            $CHROOT_PATH/etc      none    bind            0 0
FSTAB_LINES
)
		if [[ "$(cat /etc/fstab | grep $CHROOT_PATH)" == "" ]]; then
			echo -e "\nAdding to /etc/fstab: \n$FSTAB_ENTRY\n"
			[[ "$chk_exec" == "YES" ]] && echo -e "\n$FSTAB_ENTRY" >> /etc/fstab
		fi
		# check sshd_config
SSHD_ENTRY=$(cat <<SSHD_LINES
# local ssh means chroot?
Match Address 127.0.0.1
	ChrootDirectory $CHROOT_PATH
	X11Forwarding yes
SSHD_LINES
)
		if [[ "$(cat /etc/ssh/sshd_config | grep $CHROOT_PATH)" == "" ]]; then
			echo -e "\nAdding to /etc/ssh/sshd_config: \n$SSHD_ENTRY\n"
			[[ "$chk_exec" == "YES" ]] && echo -e "\n$SSHD_ENTRY" >> /etc/ssh/sshd_config
		fi
		echo
	fi
}

# BEGIN MAIN SCRIPT

echo -e "\n$MY1_TOOLBASE - $MY1_TOOLNAME ($MY1_TOOLVERS)\n"
process_command "$@"
exit 0

# END MAIN SCRIPT
