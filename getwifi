#!/bin/bash

# getwifi
# - written by azman@my1matrix.net
# - simple wifi connect script based on wpa utilities
# - STILL TESTING FOR WPA??

WIFI_DEV=${WIFI_DEV:="wlan0"}
WIFI_ADD=${WIFI_ADD:="192.168.1.100"}
WIFI_MSK=${WIFI_MSK:="255.255.255.0"}
WIFI_SSID=${WIFI_SSID:=""}
WIFI_ENC=${WIFI_ENC:=""}
WIFI_ENCS=${WIFI_ENCS:=""}

WIFI_LOGFILE=${WIFI_LOGFILE:="/tmp/$(basename $0).log"}
WIFI_WPA_CONF=${WIFI_WPA_CONF:="/etc/wpa_supplicant.conf"}
WIFI_WPA_SUPP="" # do not use wpa by default
WIFI_RUN_DHCP="yes" # use dhcp by default

WIFI_DO_STOP=""
MSG_NO_WPA_SUPPLICANT="Failed to connect to wpa_supplicant"
OPT_WRITECFG_WPA=""

function must_be_root()
{
	[[ $UID -ne 0 ]] && echo -e "Abort: must run as root!\n" && exit 1
}

while [ "$1" != "" ]; do
	case $1 in
		-h|--help)
			echo "Usage:"
			echo "  $(basename $0) [parameters] ..."
			echo "The script's parameters are:"
			echo "  --help           This help."
			echo "  --ssid [ssid]    Specify SSID."
			echo "  --key [pass]     Specify key/passphrase."
			echo "  --wpa            Flag WPA usage."
			echo "  --device [dev]   Specify WIFI Device."
			echo "  --static [IP]    Specify Static IP."
			echo "  --netmask [mask] Specify IP Mask."
			echo "  --stop           Stop the service."
			echo "  --write-wpacfg   Write WPA configuration."
			exit
			;;
		--ssid)
			shift
			[[ "$1" == "" ]] && echo "No SSID given? Aborting..." && exit 1
			WIFI_SSID="$1"
			;;
		--key)
			shift
			[[ "$1" == "" ]] && echo "No key given? Aborting..." && exit 1
			WIFI_ENC="$1"
			;;
		--wpa)
			WIFI_WPA_SUPP="yes"
			;;
		--device)
			shift
			[[ "$1" == "" ]] && echo "No device given? Aborting..." && exit 1
			WIFI_DEV="$1"
			;;
		--static)
			shift
			[[ "$1" == "" ]] && echo "No address given? Aborting..." && exit 1
			WIFI_ADD="$1"
			WIFI_RUN_DHCP=""
			;;
		--netmask)
			shift
			[[ "$1" == "" ]] && echo "No netmask given? Aborting..." && exit 1
			WIFI_MSK="$1"
			;;
		-s|--stop)
			WIFI_DO_STOP="yes"
			;;
		--write-wpacfg)
			OPT_WRITECFG_WPA="yes"
			;;
		*)
			echo "You passed an illegal switch to the program!"
			echo "Run '$0 -h' for more help."
			exit
			;;
	esac
	shift
done

# now we start!
must_be_root

if [[ "$OPT_WRITECFG_WPA" == "yes" ]]; then
WIFI_WPA_CONF_DATA=$(cat <<SETVAR1
network={
	scan_ssid=0
	ssid="$WIFI_SSID"
	proto=WPA RSN
	key_mgmt=WPA-PSK WPA-EAP
	pairwise=CCMP TKIP
	group=CCMP TKIP
	psk="$WIFI_ENCS"
	priority=0
}
SETVAR1
)
	echo "Writing (append) following network info to '$WIFI_WPA_CONF':"
	echo "$WIFI_WPA_CONF_DATA"
	echo "$WIFI_WPA_CONF_DATA" >>$WIFI_WPA_CONF
fi

if [[ "$WIFI_DO_STOP" == "yes" ]]; then
	# check if wpa is running?
	if [[ "$(wpa_cli status 2>/dev/null | grep "$MSG_NO_WPA_SUPPLICANT")" == "" ]] ; then
		if [[ "$(wpa_cli status 2>/dev/null | grep "$WIFI_DEV")" == "" ]] ; then
			echo "Interface '$WIFI_DEV' NOT up?!"
		else
			echo -n "Terminating wpa_supplicant... "
			if [[ "$(wpa_cli -i$WIFI_DEV terminate | grep OK)" == "" ]]; then
				echo "wpa_cli ERROR!"
			else
				echo "done."
			fi
		fi
	fi
	ifs_save=$IFS
	IFS=$'\n'
	tmp_lines=($(ps -ef | grep "dhcpcd"))
	IFS=$ifs_save
	GO_FISH=""
	# check currently running dhcpcd process
	for (( a=0;a<${#tmp_lines[@]};a++ )); do
		[[ "$(echo ${tmp_lines[$a]} | grep $WIFI_DEV)" == "" ]] && continue
		GO_FISH="yes"
	done
	if [[ "$GO_FISH" == "" ]]; then
		echo "No running dhcpcd on $WIFI_DEV!"
	else
		echo -n "Terminating dhcp daemon on $WIFI_DEV... "
		dhcpcd -k $WIFI_DEV 2>/dev/null
		retval=$?
		[[ $retval -ne 0 ]] && echo -n "(dhcpcd) Return Error [$retval]? "
		echo "done."
	fi
	exit 0
fi

# look for WIFI_DEV, in case it's NOT plugged in
echo -n "Looking for $WIFI_DEV..."
[[ "$(iwconfig 2>/dev/null | grep "$WIFI_DEV")" == "" ]] &&
	echo "NOT FOUND! Exiting!" && exit 0
echo "found."

# configure for static if DHCP NOT requested
if [[ "$WIFI_RUN_DHCP" == "yes" ]] ; then
	WIFI_ADD=""
	WIFI_MSK=""
else
	WIFI_ADD="$WIFI_ADD"
	WIFI_MSK="netmask $WIFI_MSK"
fi

# configure for WEP key & assign ssid
if [[ "$WIFI_WPA_SUPP" == "" ]]; then
	[[ "$WIFI_ENC" != "" ]] && WIFI_ENC="enc $WIFI_ENC"
fi
[[ "$WIFI_SSID" != "" ]] && WIFI_SSID="essid $WIFI_SSID"

echo -n "Configuring $WIFI_DEV..."
iwconfig $WIFI_DEV $WIFI_SSID $WIFI_ENC >>$WIFI_LOGFILE
ifconfig $WIFI_DEV up $WIFI_MSK $WIFI_ADD >>$WIFI_LOGFILE
echo "done."

if [[ "$WIFI_WPA_SUPP" == "yes" ]]; then
	echo -n "Starting wpa_supplicant... "
	wpa_supplicant -B -Dwext -i$WIFI_DEV -c$WIFI_WPA_CONF
	echo "done."
fi

if [[ "$WIFI_RUN_DHCP" == "yes" ]]; then
	echo -n "Starting DHCP client daemon..."
	dhcpcd -h $(hostname) $WIFI_DEV 2>/dev/null >>$WIFI_LOGFILE
	retval=$?
	[[ $retval -ne 0 ]] && echo -n "(dhcpcd) Return Error [$retval]? "
	echo "done."
fi

exit 0
