#!/bin/bash

# slackdist
# - written by azman@my1matrix.net
# - slackware live builder (incomplete...)

# standard tool info
TOOL_THISFUNC="Slackware LiveCD Builder"
TOOL_THISVERS="2010.01.00"
# standard tool patch
TOOL_CHECKCMD="$@"
TOOL_COMMANDS=${TOOL_CHECKCMD:="--help"}
TOOL_THISFILE=$(basename $0)
TOOL_LOCATION=$(dirname $0)
# look for alien_bob's conf file?
MIRROR_CONF="mirror-slackware-current.conf"
[ -f $MIRROR_CONF ] && source $MIRROR_CONF
# in case we want to sync with alien_bob's conf file
SLACKROOTDIR=${SLACKROOTDIR:="/home/ftp/slackware"}
RELEASE=${RELEASE:-"current"}
SLACKRELEASE="slackware-${RELEASE}"
# slackware tool specific
TOOL_SLACKDIR=${TOOL_SLACKDIR:="${SLACKROOTDIR}/${SLACKRELEASE}"}
TOOL_PKGS_DIR="${TOOL_SLACKDIR}/slackware"
TOOL_PKG_LIST="${TOOL_SLACKDIR}/PACKAGES.TXT"
TOOL_TAG_CORE=${TOOL_TAG_CORE:="${TOOL_THISFILE%%.*}-core.tag"}
TOOL_TAG_DGUI=${TOOL_TAG_DGUI:="${TOOL_THISFILE%%.*}-dgui.tag"}
# pkgs_* parameters
pkgs_pack=""
pkgs_list=""
pkgs_file=""

function find_package()
{
	[ -z "$1" ] && return 1
	local temp="\<PACKAGE NAME:  ${1}-[^-]*-[^-]*-[^-]*\.t[gx]z\>"
	local test=$(grep -e"$temp" $TOOL_PKG_LIST -A3)
	[ "$test" = "" ] && return 2

	pkg_file=$(echo "$test" | grep 'PACKAGE NAME')
	pkg_file="${pkg_file##* }"
	pkg_path=$(echo "$test" | grep 'PACKAGE LOCATION')
	pkg_path="${pkg_path##*./}"
	pkg_size=$(echo "$test" | grep 'PACKAGE SIZE (compressed)')
	pkg_size="${pkg_size%% K*}"
	pkg_size="${pkg_size##* }"
	pkg_full=$(echo "$test" | grep 'PACKAGE SIZE (uncompressed)')
	pkg_full="${pkg_full%% K*}"
	pkg_full="${pkg_full##* }"

	# check if the physical file actually exists
	[ ! -f ${TOOL_SLACKDIR}/${pkg_path}/${pkg_file} ] && return 3

	pkg_exts="${pkg_file##*.}"
	pkg_name="${pkg_file%-*-*-*.${pkg_exts}}"
	temp="${pkg_file##${pkg_name}-}"
	pkg_vers="${temp%-*-*.${pkg_exts}}"
	temp="${temp##${pkg_vers}-}"
	pkg_arch="${temp%-*.${pkg_exts}}"
	temp="${temp##${pkg_arch}-}"
	pkg_extd="${temp%.${pkg_exts}}"
	pkg_desc=$(grep "$1:" $TOOL_PKG_LIST)

	return 0
}

function print_info()
{
	local title="PACKAGE <$pkg_name> - BEGIN"
	local trail="PACKAGE <$pkg_name> - END"
	for (( a=0;a<${#title};a++ )) ; do echo -n "-"; done ; echo
	echo "$title"
	for (( a=0;a<${#title};a++ )) ; do echo -n "-"; done ; echo
	echo "FILE               : ${pkg_path}/${pkg_file}"
	echo "VERSION            : $pkg_vers"
	echo "ARCHITECTURE       : $pkg_arch"
	echo "BUILD TAG          : $pkg_extd"
	echo "SIZE (Compressed)  : $pkg_size K"
	echo "SIZE (Uncompressed): $pkg_full K"
	echo "DESCRIPTION        :"
	echo -e "$pkg_desc"
	for (( a=0;a<${#trail};a++ )) ; do echo -n "-"; done ; echo
	echo "$trail"
	for (( a=0;a<${#trail};a++ )) ; do echo -n "-"; done ; echo
	return 0
}

function select_package()
{
	local do_select do_newsel
	pkg_file="$1"
	pkg_exts="${pkg_file##*.}"
	pkg_name="${pkg_file%-*-*-*.${pkg_exts}}"
	pkg_desc=$(grep "$pkg_name:" $TOOL_PKG_LIST)
	echo "Package: $pkg_file"
	echo -e "$pkg_desc"
	read -n 1 -p "Select package '$pkg' ? [y]/[*]/[q] : " do_select ; echo
	if [ "$do_select" == "q" ]; then
		echo "Aborting on user request!"
		exit 1
	else
		# update new value
		if [ "$do_select" == "y" ]; then
			do_newsel="$1:$pkg_name:ADD"
		else
			do_newsel="$1:$pkg_name:SKP"
		fi
		# check if already in the tagfile
		if [ "$(grep "$1:$pkg_name:" $TOOL_TAGFILE)" != "" ]; then
			#sed -ie "\|^$1:$pkg_name:|d" $TOOL_TAGFILE
			sed -ie "\|^$1:$pkg_name:|c\\$do_newsel" $TOOL_TAGFILE
		else
			echo "$do_newsel" >>$TOOL_TAGFILE
		fi
	fi
}

function browse_package()
{
	local chkdir="$TOOL_PKGS_DIR/$1"
	[ ! -d $chkdir ] &&
		echo "Path '$chkdir' not found! Aborting!" &&
		echo && exit 1
	cd $chkdir
	chkdir=$(pwd) # do i need this?
	for tfile in *.tgz *.txz; do
		select_package $tfile
	done
	return 0
}

function browse_software()
{
	local curr_dir=$(pwd)
	echo "" >$TOOL_TAGFILE
	for warez in "$@" ; do
		check_package $warez
	done
	cd $curr_dir
	echo "Selection written to '$TOOL_TAGFILE'."
	return 0
}

function process_param()
{
	shift
	while [ "$1" != "" ] ; do
		echo "test => $1"
		shift # in case we expand param list!
	done
}

function process_command()
{
	# check command
	case $1 in
		check)
			shift
			for arg in "$@"; do
				case $arg in
					;;
				esac
			done
			;;
		build)
			echo "Will be implemented later..."
			exit 0
			;;
		-h|--help|help)
			echo "Usage: $TOOL_THISFILE [command] [parameter]"
			echo "Available commands:"
			echo
			;;
		*)
			echo -e "Unknown command!\n"
			exit 1
			;;
	esac
}

# BEGIN MAIN SCRIPT

echo -e "\n$TOOL_THISFILE - $TOOL_THISFUNC ($TOOL_THISVERS)\n"
process_command $TOOL_COMMANDS

# END MAIN SCRIPT
