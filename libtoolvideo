#!/bin/bash

# libtoolvideo
# - written by azman@my1matrix.org
# - library functions for video-tool
#   = basically a wrapper script for various tools

video_must_have_input()
{
	local ivid=$1
	[ -z "$ivid" ] && exit 0
	[ ! -f "$ivid" ] &&
		echo -ne "\n[ABORT] Input file missing ($ivid)!\n\n" && exit 0
}

video_prepare_output()
{
	local ivid=$1
	local ovid=$2
	[ -z "$ovid" ] && ovid="${ivid%.*}_conv.avi"
	echo -n $ovid
}

video_prepare_audio()
{
	local ivid=$1
	local aout=$2
	[ -z "$aout" ] && aout="${ivid%.*}_conv.mp3"
	echo -n $aout
}

video_check_output()
{
	local ovid=$1
	[ -f "$ovid" ] &&
		echo -ne "\n[ABORT] Output file exists ($ovid)!\n\n" && exit 0
}

video_convert()
{
	local ivid=$1 ; shift
	# default settings
	local vres=${vres:="704:304"}
	local vasp=${vasp:="16:9"}
	local vbit=${vbit:="700k"}
	local vqsc=${vqsc:="8"}
	local aqsc=${aqsc:="8"}
	local vfil="scale=$vres"
	local ovid pas2 dvar dlog=/dev/null
	local vchk vlen
	# prepare names
	video_must_have_input $ivid
	ovid=`video_prepare_output $ivid $ovid`
	video_check_output $ovid
	# check params
	while [ "$1" != "" ]; do
		case $1 in
			--var) dvar="yes" ;;
			--log) dlog="$ovid.log" ;;
			--2pass) pas2="yes" ;;
			--var6) dvar="yes" ; vqsc=6 ; aqsc=6 ;;
			--vbit) shift ; vbit=$1 ;;
			--vqsc) shift ; vqsc=$1 ;;
			--aqsc) shift ; aqsc=$1 ;;
			--output) shift ; ovid=$1 ;;
			--tv) vres="512:384" ; vasp="4:3" ;; #mod16 resolution
			--lite) vfil="$vfil,eq=gamma=1.5:saturation=1.3" ;;
			--vlen) shift ; vlen=$1 ;;
			--init) shift ; vchk=$1 ;;
			*) echo -ne "\n[ABORT] Unknown param '$1'!\n\n" && exit 1
		esac
		shift
	done
	local acod="-ar 48000 -ab 128k"
	local vcod="-vb $vbit"
	[ "$dvar" = "yes" ] && pas2="" &&
		acod="-qscale:a $aqsc" && vcod="-qscale:v $vqsc"
	# -qscale:v 4 is for mpegX stuffs!
	# -crf 18 is for libx264!
	vcod="$vcod -vf $vfil -aspect $vasp -r 25"
	# tinker: ffplay -vf eq=brightness=0.06:saturation=2 $ivid
	# render: ffmpeg -i $ivid -vf eq=brightness=0.06:saturation=2 -c:a copy $ovid
	# global options
	local gopt="-sn" # disable subtitle
	# audio options
	local aopt="-c:a libmp3lame $acod"
	# video options
	local vopt="-c:v mpeg4 -vtag xvid $vcod"
	local iopt
	[ ! -z "$vchk" ] && iopt="$iopt -ss $vchk"
	[ ! -z "$vlen" ] && gopt="$gopt -t $vlen"
	# convert!
	echo "Input : $ivid"
	echo "Output: $ovid"
	echo "Settings: {A:$acod,V:$vcod,init:$vchk,vlen:$vlen}"
	echo -n "" >${dlog}
	if [ "$pas2" != "yes" ]; then
		echo -n "Processing... "
		ffmpeg ${iopt} -i ${ivid} ${gopt} ${aopt} ${vopt} ${ovid} 2>>${dlog}
		echo "done."
	else
		local chk1="${iopt} -y"
		local chk2="${iopt} "
		local opt1="-pass 1 ${gopt} ${aopt} ${vopt} -an -f avi /dev/null"
		local opt2="-pass 2 ${gopt} ${aopt} ${vopt} ${ovid}"
		echo -n "Processing (PASS1)... "
		ffmpeg ${chk1} -i ${ivid} ${opt1} 2>>${dlog}
		echo -ne "done.\nProcessing (PASS2)... "
		ffmpeg ${chk2} -i ${ivid} ${opt2} 2>>${dlog}
		echo "done."
	fi
}

video_convert_mp4()
{
	local ivid=$1 ; shift
	video_must_have_input $ivid
	local path=`dirname $ivid`
	path=`cd $path ; pwd`
	local base=`basename $ivid`
	local extf=${base##*.}
	local ovid=${base%.${extf}}.mp4
	local tool="ffmpeg"
	exec=`which $tool 2>/dev/null`
	[ ! -x "$exec" ] && echo "Binary $tool not found!" && exit 1
	ivid=${path}/${base}
	ovid=${path}/${ovid}
	while [ -f "$ovid" ] ; do
		ovid=${ovid//.mp4/_conv.mp4}
	done
	local acod="-codec:a aac -b:a 128k" # stereo: 64k per channel
	local vcod="-codec:v libx264 -pix_fmt yuv420p"
	# make sure creation time created from current file's timestamp
	local stat=`stat -c '%y' $ivid` # modified time
	local meta=`date -d "$stat" -Ins`
	meta="-metadata creation_time=${meta:0:19}"
	# default option
	local dlog=/dev/null
	local vopt="-b:v 650k -minrate 400k -maxrate 900k"
	vopt="$vopt -bufsize 1500k -vf scale=-2:360"
	while [ "$1" != "" ]; do
		case "$1" in
			# https://gist.github.com/dvlden/b9d923cb31775f92fa54eb8c39ccd5a9
			--1080p)
				vopt="-b:v 4500k -minrate 4500k -maxrate 9000k"
				vopt="$vopt -bufsize 9000k -vf scale=-2:1080" ;;
			--720p)
				vopt="-b:v 2500k -minrate 1500k -maxrate 4000k"
				vopt="$vopt -bufsize 5000k -vf scale=-2:720" ;;
			--480p)
				vopt="-b:v 1000k -minrate 500k -maxrate 2000k"
				vopt="$vopt -bufsize 2000k -vf scale=-2:480" ;; # -2 div-by-2?
			--360p)
				vopt="-b:v 750k -minrate 400k -maxrate 1000k"
				vopt="$vopt -bufsize 1500k -vf scale=-2:360" ;;
			--mini)
				vopt="-b:v 450k -minrate 400k -maxrate 900k"
				vopt="$vopt -bufsize 900k -vf scale=-2:280" ;;
			--log) dlog="$ovid.log" ;;
			-*|*) echo -ne "\n[ABORT] Unknown param '$1'!\n\n" && exit 1
		esac
		shift
	done
	local opts="-preset slow $meta $acod $vcod $vopt"
	echo "-- Settings: {$opts}"
	echo -n "-- Processing... "
	$exec -i $ivid $opts $ovid 2>>$dlog
	echo "done."
}

video_split_audio()
{
	local ivid=$1
	local aout=$2
	video_must_have_input $ivid
	aout=`video_prepare_audio $ivid $aout`
	video_check_output $aout
	# audio options
	local aopt="-c:a libmp3lame -ar 48000 -ab 128k"
	echo "Input: $ivid"
	echo -n "Extracting audio to '$aout'..."
	ffmpeg -i $ivid -vn $aopt $aout >/dev/null 2>&1
	[ $? -eq 0 ] && echo "done." || echo "error?"
}

video_split_video()
{
	local ivid=$1
	local vout=$2
	video_must_have_input $ivid
	vout=`video_prepare_output $ivid $ovid`
	video_check_output $vout
	echo "Input: $ivid"
	echo -n "Extracting video to '$vout'..."
	ffmpeg -i $ivid -vcodec copy -an -y $vout >/dev/null 2>&1
	[ $? -eq 0 ] && echo "done." || echo "error?"
}

video_merge_audio()
{
	local vchk=$1
	local achk=$2
	local ovid=$3
	video_must_have_input $vchk
	video_must_have_input $achk
	[ -z "$ovid" ] &&
		echo -ne "\n[ABORT] Output file not given!\n\n" && exit 0
	video_check_output $ovid
	echo "Inputs: {$vchk,$achk}"
	echo -n "Merging video/audio into '$ovid'..."
	ffmpeg -i $vchk -i $achk -vcodec copy -acodec copy -y $ovid >/dev/null 2>&1
	[ $? -eq 0 ] && echo "done." || echo "error?"
}

video_cut()
{
	local ivid=$1 ; shift
	# default video length is 1 minute
	local vchk vlen="1:00"
	while [ "$1" != "" ]; do
		case $1 in
			--vlen) shift ; vlen=$1 ;;
			--init) shift ; vchk=$1 ;;
			*) echo -ne "\n[ABORT] Unknown param '$1'!\n\n" && exit 0
		esac
		shift
	done
	[ ! -z "$vchk" ] && vchk="-ss $vchk"
	vlen="-t $vlen"
	video_must_have_input $ivid
	ovid=`video_prepare_output $ivid $ovid`
	video_check_output $ovid
	echo "Input: $ivid"
	echo -n "Cutting (init:$vchk,time:$vlen) into $ovid... "
	ffmpeg $vchk -i $ivid $vlen -c copy $ovid >/dev/null 2>&1
	[ $? -eq 0 ] && echo "done." || echo "error?"
}

video_mp4join()
{
	# list is a text file containing list of mp4 files to be joined
	# - 1 file per line
	# - format: "file <filename>"
	local list=$1
	local ovid=$2
	video_must_have_input $list
	ovid=`video_prepare_output $list $ovid`
	video_check_output $ovid
	echo "List: $list"
	echo -n "Joining video into '$ovid'... "
	ffmpeg -f concat -i $list -c copy $ovid
	[ $? -eq 0 ] && echo "done." || echo "error?"
}

video_play()
{
	local ivid=$1
	local tool=`basename $0`
	local exec=${exec:="mplayer"}
	local init=${init:=""} # 00:00:00 (HH:MM:SS)
	local time=${time:=""}
	local info=${info:="${tool}-play.info"}
	local path play
	# example info file
	#ivid="file.mp4"
	#init="00:01:00"
	#time="20"
	while [ "$1" != "" ]; do
		case $1 in
			--init) shift ; init=$1 ;;
			--time) shift ; time=$1 ;;
			--info) shift ; info=$1 ;;
			*) echo -ne "\n[ABORT] Unknown param '$1'!\n\n" && exit 0
		esac
		shift
	done
	# since . $info directly does NOT work :(
	[ -f "$info" ] && path=`dirname $info` &&
		path=`cd $path ; pwd` && info=`basename $info` &&
		info=$path/$info && . $info
	video_must_have_input $ivid
	play=`which $exec 2>/dev/null`
	[ $? -ne 0 ] && echo "Cannot execute $exec!" && exit 1
	${play} -ss ${init} -endpos ${time} ${ivid} >/dev/null 2>&1
}
