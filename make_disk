#!/bin/bash

source_libmy1slack()
{
	local libs="libmy1echo libmy1file libmy1slack"
	local find=`which slacktest 2>/dev/null`
	[ ! -f "$find" ] && echo -ne "\nCannot find slacktest!\n\n" && exit 1
	local path=`dirname $find`
	local full
	for that in $libs ; do
		full=$path/$that
		[ ! -f "$full" ] && echo -ne "\nCannot find $full!\n\n" && exit 1
		. $full
	done
}
source_libmy1slack

make_disk_image()
{
	local disk=$1 # disk name
	[ -z "$disk" ] && disk="disk.img"
	local size=$2 # disk size - e.g. 512M
	[ -z "$size" ] && size="512M"
	local temp="qemu-img"
	must_have_exec $temp
	local full=`find_binary $temp`
	info_msg "-- Creating disk '$disk' @ '$size'"
	$full create -f raw $disk $size >/dev/null
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
}

prompt_to_continue()
{
	read -p "Continue? [y/N] " -n 1 what && echo
	[ "$what" = "y" ] && what="Y"
	[ -z "$what" -o "$what" != "Y" ] && what="N"
	[ "$what" = "N" ] && exit 0
}

make_disk_dos_single()
{
	local disk=$1 # device path
	local temp="fdisk"
	must_have_exec $temp
	local full=`find_binary $temp`
	info_msg "Create DOS partition table on $disk (ALL DATA WILL BE LOST!)\n"
	prompt_to_continue
	info_msg "-- Creating single partition disk and flag as bootable... "
	$full $disk >/dev/null 2>&1 <<EOF
o
n
p
1


t
c
a
w
EOF
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
}

make_disk_dos_double()
{
	# creates dos boot (def:2G) and an extra partition (the rest)
	local disk=$1 # device path
	local size=$2 # target boot partition size, always ntfs
	[ -z $size ] && size="+2G"
	local type=$3 # target extra partition type 7 is ntfs
	[ -z $type ] && type="83" # default is linux
	local temp="fdisk"
	must_have_exec $temp
	local full=`find_binary $temp`
	info_msg "Create DOS partition table on $disk (ALL DATA WILL BE LOST!)\n"
	prompt_to_continue
	info_msg "-- Creating 2-partition disk and flag first as bootable... "
	$full $disk >/dev/null 2>&1 <<EOF
o
n
p
1

$size
t
7
a
n
p
2


w
EOF
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
}

make_disk_gpt_triple()
{
	# creates EFI (511M), root (def:2G), extra partitions (the rest)
	local disk=$1 # device path
	local size=$2 # target rootfs size, always linux
	[ -z $size ] && size="+2G"
	local type=$3 # target extra partition type 0700 is ntfs (ms data)
	[ -z $type ] && type="8300" # default is linux
	local temp="gdisk"
	must_have_exec $temp
	local full=`find_binary $temp`
	info_msg "Create GUID partition table on $disk (ALL DATA WILL BE LOST!)\n"
	info_msg "-- {EF00:+511M,8300:$size,$type:the_rest}\n"
	prompt_to_continue
	info_msg "-- Cleaning up boot sector... "
	dd if=/dev/zero of=$disk bs=512 count=1 conv=notrunc >/dev/null 2>&1
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
	info_msg "-- Creating EFI partition on disk... "
	gdisk $disk >/dev/null 2>&1 <<EOF
o
Y
x
n
m
n


+511M
EF00
w
Y

EOF
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
	info_msg "-- Creating root partition {8300:$size} on disk... "
	gdisk $disk >/dev/null 2>&1 <<EOF
n


$size
8300
w
Y

EOF
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
	info_msg "-- Creating data partition {$type:the_rest} on disk... "
	gdisk $disk >/dev/null 2>&1 <<EOF
n



$type
w
Y

EOF
	[ $? -ne 0 ] && error_exit "failure!\n\n"
	info_msg --no-tag "done!\n"
}

case "$1" in
	image) shift ; make_disk_image $@ ;;
	boot_dos) shift ; make_disk_dos_single $@ ;;
	boot_duo) shift ; make_disk_dos_double $@ ;;
	boot_gpt) shift ; make_disk_gpt_triple $@ ;;
	*) [ "$1" != "" ] && info_msg "Unknown option '$1'!\n" ;;
esac
