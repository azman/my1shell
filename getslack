#!/bin/bash

# getslack
# - written by azman@my1matrix.net
# - a 'reduced' version of alien_bob's mirror_slackware_current.sh

MY1TOOL="$(basename $0 .sh)"
MY1PATH="$(dirname $0)"
# look for config file
for conffile in "$HOME/.$MY1TOOL" \
		"$HOME/.$MY1TOOL.conf" "$MY1PATH/$MY1TOOL.conf"; do
	[[ ! -f $conffile ]] && continue
	source $conffile ; break
done

MY1_GETSLACK_CONF=$(cat <<MY1CONF
# checkout release & arch
RSYNCURLROOT=\${RSYNCURLROOT:="slackware.mirrors.tds.net::slackware/"}
#RSYNCURLROOT=\${RSYNCURLROOT:="rsync.osuosl.org::slackware/"}
#RSYNCURLROOT=\${RSYNCURLROOT:="taper.alienbase.nl::mirrors/slackware/"}
#RSYNCURLROOT=\${RSYNCURLROOT:="mirror.aarnet.edu.au::slackware/"}
RELEASE=\${RELEASE:="13.37"}
SLACKARCH=\${SLACKARCH:="\$(uname -m)"}
SLACKFULL=\${SLACKFULL:="slackware"}
[[ "\$SLACKARCH" == "x86_64" ]] && SLACKFULL="slackware64"
# kde option?
NO_KDE=\${NO_KDE:="no"}
GO_BOOTSTRAP=\${GO_BOOTSTRAP:="no"}
# include some wanted software in excluded path
INCLUDES="\$INCLUDES --include=extra/PACKAGES.TXT"
#INCLUDES="\$INCLUDES --include=extra/wicd/"
#INCLUDES="\$INCLUDES --include=extra/jdk-6/"
#INCLUDES="\$INCLUDES --include=extra/source/"
#INCLUDES="\$INCLUDES --include=extra/source/flashplayer-plugin/"
# exclude non-essentials
#EXCLUDES="\$EXCLUDES --exclude=extra/"
EXCLUDES="\$EXCLUDES --exclude=extra/*"
#EXCLUDES="\$EXCLUDES --exclude=extra/source/*"
# exclude non-standard
EXCLUDES="\$EXCLUDES --exclude=pasture/ --exclude=testing/"
# exclude extra installers
EXCLUDES="\$EXCLUDES --exclude=usb-and-pxe-installers/"
# exclude source
EXCLUDES="\$EXCLUDES --exclude=source/"
# exclude unwanted packages
EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/e/ --exclude=\${SLACKFULL}/f/"
EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/kdei/ --exclude=\${SLACKFULL}/y/"
# exclude source for unwanted packages - in case source is included
EXCLUDES="\$EXCLUDES --exclude=source/e/ --exclude=source/f/"
EXCLUDES="\$EXCLUDES --exclude=source/kdei/ --exclude=source/y/"
# if we don't need kde
[[ "\$NO_KDE" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/kde/"
[[ "\$NO_KDE" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=source/kde/"
# if we want to bootstrap
[[ "\$GO_BOOTSTRAP" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/d/ --exclude=source/d/"
[[ "\$GO_BOOTSTRAP" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/k/ --exclude=source/k/"
[[ "\$GO_BOOTSTRAP" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/t/ --exclude=source/t/"
[[ "\$GO_BOOTSTRAP" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/tcl/ --exclude=source/tcl/"
[[ "\$GO_BOOTSTRAP" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/x/ --exclude=source/x/"
[[ "\$GO_BOOTSTRAP" == "yes" ]] && EXCLUDES="\$EXCLUDES --exclude=\${SLACKFULL}/xap/ --exclude=source/xap/"
MY1CONF
)
if [[ "$1" == "--config" ]]; then
	echo "$MY1_GETSLACK_CONF" >$HOME/.$MY1TOOL
	echo "New config file ($HOME/.$MY1TOOL) written!"
	exit 0
fi

function find_binary()
{
	local chk_exec=$1
	local set_exec=$(which $chk_exec 2>/dev/null)
	[[ "$set_exec" == "" ]] &&
		echo "Binary '$chk_exec' not found! Aborting!" && exit 1
	echo -n $set_exec
}

function check_path()
{
	local chk_path=$1
	[[ ! -d "$chk_path"  ]] &&
		echo "Path '$chk_path' not found! Aborting!" && exit 1
}

# tool & env setup
RSYNC=${RSYNC:="$(find_binary rsync)"}
SLACKROOT=${SLACKROOT:="$(pwd)"}
SLACKARCH=${SLACKARCH:="$(uname -m)"}
SLACKSUFX=${SLACKSUFX:=""}
[[ "$SLACKARCH" == "x86_64" ]] && SLACKSUFX="64"
SLACKFULL=${SLACKFULL:="slackware${SLACKSUFX}"}
RELEASE=${RELEASE:="13.37"}
SLACKRELEASE="${SLACKFULL}-${RELEASE}"
SLACKPATH="${SLACKROOT}/${SLACKRELEASE}"
RSYNCURLROOT=${RSYNCURLROOT:="rsync.osuosl.org::slackware/"}
RSYNCURL=${RSYNCURL:="${RSYNCURLROOT}${SLACKRELEASE}"}
RSYNCOPT=${RSYNCOPT:="--delete --delete-excluded --partial -rlptD --progress"}

# option to create iso - helping o-thers... local mirror must exist!
if [[ "$1" == "--mkiso" ]]; then
	MKISOFS=${MKISOFS:="$(find_binary mkisofs)"}
	ISOPATH=${ISOPATH:="$HOME/temp"}
	check_path $ISOPATH
	check_path $SLACKPATH
	cd $SLACKPATH
	echo -n "Creating ISO from $SLACKPATH... "
	$MKISOFS -o $ISOPATH/${SLACKRELEASE}-install.iso \
		-V "${SLACKRELEASE} Install DVD" \
		-R -J -hide-rr-moved -hide-joliet-trans-tbl -d -N -v -v -no-emul-boot \
		-boot-load-size 32 -boot-info-table -sort isolinux/iso.sort \
		-b isolinux/isolinux.bin -c isolinux/isolinux.boot \
		-A "${SLACKRELEASE} Install DVD (build $(date +%Y%m%d))" . \
		> $ISOPATH/${SLACKRELEASE}-install_build.log 2>&1
	echo "done!"
	exit 0
fi

# customized default sync list
EXCLUDES=${EXCLUDES:="--exclude=pasture/ --exclude=testing/ --exclude=source/"}
INCLUDES=${INCLUDES:=""}
[[ -r "$EXCLUDEFILE" ]] && EXCLUDES="--exclude-from=$EXCLUDEFILE"
[[ -r "$INCLUDEFILE" ]] && INCLUDES="--include-from=$INCLUDEFILE"

# start actual mirroring process - reduced version of alien_bob's script

echo -e "#\n# Checking and changing to $SLACKPATH ...\n#"
[[ ! -d $SLACKPATH ]] && mkdir -pv $SLACKPATH
cd $SLACKPATH
umask 022

echo "*** Using ${RSYNCURL} ***"
$RSYNC ${RSYNCOPT} ${INCLUDES} ${EXCLUDES} ${RSYNCURL}/ .
echo "*** Using ${RSYNCURL} - (2nd Run) ***"
$RSYNC ${RSYNCOPT} ${INCLUDES} ${EXCLUDES} ${RSYNCURL}/ .
echo "$(date) [$$]: Done mirroring ${SLACKRELEASE} (exit code $?)."

exit 0
